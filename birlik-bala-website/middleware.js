import { NextResponse } from "next/server";

export async function middleware(req) {
  const { pathname } = req.nextUrl;
  const token = req.cookies.get("access_token")?.value;

  const redirect = (url, msg) => {
    const res = NextResponse.redirect(new URL(url, req.url));
    res.cookies.set("auth_message", msg, { path: "/", maxAge: 5 });
    return res;
  };

  // üîí –°—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const protectedPages = ["/courses", "/profile", "/articles"];
  if (!token && protectedPages.some(p => pathname.startsWith(p))) {
    return redirect("/auth", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å");
  }

  // üîí –ê–¥–º–∏–Ω–∫–∞
  if (pathname.startsWith("/admin")) {
    try {
      const res = await fetch(`${process.env.BACKEND_URL}/api/v1/auth/user-info`, {
        headers: { Cookie: `access_token=${token}` },
      });
      if (!res.ok) return redirect("/auth", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

      const data = await res.json();
      if (data?.user?.role !== "admin") {
        return redirect("/courses", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω–∫—É");
      }
    } catch {
      return redirect("/auth", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
  }

  // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É
  if (pathname.startsWith("/courses/")) {
    if (!token) return redirect("/auth", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å");

    const courseId = pathname.split("/")[2];
    try {
      const res = await fetch(`${process.env.BACKEND_URL}/api/v1/auth/course/get/${courseId}`, {
        headers: { Cookie: `access_token=${token}` },
      });
      if (!res.ok) return redirect("/courses", "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É");
    } catch {
      return redirect("/courses", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞");
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/courses/:path*", "/profile/:path*", "/admin/:path*"],
};
